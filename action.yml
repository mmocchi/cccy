name: 'Python Complexity Analysis'
description: 'Analyze Python code complexity with cccy'
author: 'cccy'

inputs:
  command:
    description: 'Command to run (check, show-list, show-functions, show-summary)'
    required: false
    default: 'check'
  paths:
    description: 'Paths to analyze (space-separated)'
    required: false
    default: '.'
  format:
    description: 'Output format (table, json, csv, detailed) - for show-list/show-functions only'
    required: false
    default: 'table'
  max-complexity:
    description: 'Maximum allowed cyclomatic complexity - for check command'
    required: false
  max-cognitive:
    description: 'Maximum allowed cognitive complexity - for check command'
    required: false
  recursive:
    description: 'Recursively analyze directories (true/false)'
    required: false
    default: 'true'
  exclude:
    description: 'Exclude patterns (comma-separated glob patterns)'
    required: false
  include:
    description: 'Include patterns (comma-separated glob patterns)'
    required: false
  verbose:
    description: 'Enable verbose output (true/false)'
    required: false
    default: 'false'

outputs:
  complexity-report:
    description: 'Complexity analysis report'

runs:
  using: 'composite'
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"
        enable-cache: true
    
    - name: Install Python
      shell: bash
      run: uv python install
    
    - name: Install cccy
      shell: bash
      run: uv tool install cccy
    
    - name: Run complexity analysis
      shell: bash
      run: |
        cmd="${{ inputs.command }}"
        args=("$cmd")
        
        # Add paths if provided
        if [ -n "${{ inputs.paths }}" ] && [ "${{ inputs.paths }}" != "." ]; then
          IFS=' ' read -ra PATH_ARRAY <<< "${{ inputs.paths }}"
          args+=("${PATH_ARRAY[@]}")
        fi
        
        # Add format option for show-list and show-functions
        if [[ "$cmd" == "show-list" || "$cmd" == "show-functions" ]] && [ "${{ inputs.format }}" != "table" ]; then
          args+=("--format" "${{ inputs.format }}")
        fi
        
        # Add complexity thresholds for check command
        if [ "$cmd" == "check" ]; then
          if [ -n "${{ inputs.max-complexity }}" ]; then
            args+=("--max-complexity" "${{ inputs.max-complexity }}")
          fi
          if [ -n "${{ inputs.max-cognitive }}" ]; then
            args+=("--max-cognitive" "${{ inputs.max-cognitive }}")
          fi
        fi
        
        # Add recursive option
        if [ "${{ inputs.recursive }}" == "false" ]; then
          args+=("--no-recursive")
        fi
        
        # Add exclude patterns
        if [ -n "${{ inputs.exclude }}" ]; then
          IFS=',' read -ra EXCLUDE_PATTERNS <<< "${{ inputs.exclude }}"
          for pattern in "${EXCLUDE_PATTERNS[@]}"; do
            args+=("--exclude" "$pattern")
          done
        fi
        
        # Add include patterns
        if [ -n "${{ inputs.include }}" ]; then
          IFS=',' read -ra INCLUDE_PATTERNS <<< "${{ inputs.include }}"
          for pattern in "${INCLUDE_PATTERNS[@]}"; do
            args+=("--include" "$pattern")
          done
        fi
        
        # Add verbose flag
        if [ "${{ inputs.verbose }}" == "true" ]; then
          args+=("--verbose")
        fi
        
        uv tool run cccy "${args[@]}"

branding:
  icon: 'bar-chart-2'
  color: 'blue'