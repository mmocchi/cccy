[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Quality Assurance",
]
dependencies = [
  "mccabe>=0.7.0",
  "cognitive-complexity>=1.3.0",
  "click>=8.0.0",
  "tabulate>=0.9.0",
  "tomli>=1.2.0;python_version<'3.11'",
  "pydantic>=2.0.0",
  "pydantic-settings>=2.0.0",
]
description = "Python complexity measurement tool"
license = "MIT"
name = "cccy"
readme = "README.md"
requires-python = ">=3.9"
version = "0.2.1"
[[project.authors]]
email = "akihiro.matsumoto.exe@gmail.com"
name = "mmocchi"

[dependency-groups]
dev = [
  "pytest-cov>=5.0.0",
  "ruff>=0.12.0",
  "types-tabulate>=0.9.0.20241207",
  "pre-commit>=3.5.0",
  "tox>=4.0.0",
  "mypy>=1.16.1",
  "pytest>=8.4.1",
  "import-linter>=2.3",
]

[project.scripts]
cccy = "cccy.presentation.cli.main:main"

[project.urls]
Homepage = "https://github.com/mmocchi/cccy"
Issues = "https://github.com/mmocchi/cccy/issues"
Repository = "https://github.com/mmocchi/cccy"

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
python_version = "3.9"
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
# より厳しい設定を追加
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
no_implicit_reexport = true
strict_optional = true
[[tool.mypy.overrides]]
ignore_missing_imports = true
module = ["mccabe.*", "cognitive_complexity.*", "tomli.*", "tomllib.*"]

[[tool.mypy.overrides]]
module = "cccy.config"
warn_unused_ignores = false

[[tool.mypy.overrides]]
check_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
module = "tests.*"

[tool.cccy]
exclude = ["*/migrations/*", "*/venv/*", "*/.venv/*", "*/node_modules/*", "*/__pycache__/*", "*.egg-info/*"]
include = []
max-cognitive = 7
max-complexity = 10
paths = ["src/"]

[tool.importlinter]
root_packages = ["cccy"]
[[tool.importlinter.contracts]]
modules = ["cccy.domain"]
name = "Clean Architecture: Domain Layer Independence"
type = "independence"

[[tool.importlinter.contracts]]
forbidden_modules = ["cccy.infrastructure", "cccy.presentation"]
name = "Clean Architecture: Application Layer Dependencies"
source_modules = ["cccy.application"]
type = "forbidden"

[[tool.importlinter.contracts]]
forbidden_modules = ["cccy.application", "cccy.presentation"]
name = "Clean Architecture: Infrastructure Dependencies"
source_modules = ["cccy.infrastructure"]
type = "forbidden"

[[tool.importlinter.contracts]]
forbidden_modules = ["cccy.infrastructure"]
ignore_imports = [
  "cccy.presentation.factories.service_factory -> cccy.infrastructure.calculators.concrete_calculators",
  "cccy.presentation.factories.service_factory -> cccy.infrastructure.config.manager",
  "cccy.presentation.factories.service_factory -> cccy.infrastructure.formatters.output",
  "cccy.presentation.factories.service_factory -> cccy.infrastructure.logging.config",
]
name = "Clean Architecture: Presentation Dependencies"
source_modules = ["cccy.presentation"]
type = "forbidden"

[[tool.importlinter.contracts]]
modules = ["cccy.shared"]
name = "Clean Architecture: Shared Layer Independence"
type = "independence"

[tool.ruff.lint]
ignore = [
  "E501",
  "S101",
  "S603",
  "S607",
  "ANN401",
  "D100",
  "D104",
  "D107",
  "D203",
  "D213",
  "D205",
  "D301",
  "D400",
  "D415",
  "PLR0913",
  "PLR0912",
  "PLR0915",
  "PLR2004",
  "PLC0414",
  "TRY003",
  "TRY300",
  "TRY301",
  "TRY400",
  "PERF401",
  "PT011",
]
select = ["E", "W", "F", "I", "B", "C4", "UP", "S", "A", "RET", "SIM", "ARG", "PTH", "RUF", "ANN", "TCH", "D", "ERA", "TRY", "PERF", "PL", "PT"]

[tool.ruff.format]
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.pytest.ini_options]
addopts = ["--strict-markers", "--strict-config", "--cov=cccy", "--cov-report=term-missing", "--cov-report=html", "--cov-report=xml"]
python_classes = ["Test*"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["src/cccy"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["D401", "PLR2004"]

[tool.ruff.lint.isort]
known-first-party = ["cccy"]

[tool.hatch.build.targets.wheel]
packages = ["src/cccy"]

[tool.hatch.build.targets.sdist]
include = ["/src", "/tests", "/README.md", "/LICENSE"]
