[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pycomplex"
version = "0.1.0"
description = "Python complexity measurement tool"
readme = "README.md"
license = "MIT"
authors = [
    { name = "mmocchi", email = "akihiro.matsumoto.exe@gmail.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
]
requires-python = ">=3.8"
dependencies = [
    "mccabe>=0.7.0",
    "cognitive-complexity>=1.3.0",
    "click>=8.0.0",
    "tabulate>=0.9.0",
    "tomli>=1.2.0;python_version<'3.11'",
]

[project.scripts]
pycomplex = "pycomplex.cli:main"

[project.urls]
Homepage = "https://github.com/example/pycomplex"
Repository = "https://github.com/example/pycomplex"
Issues = "https://github.com/example/pycomplex/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/pycomplex"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.ruff]
target-version = "py38"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["pycomplex"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mccabe.*",
    "cognitive_complexity.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=pycomplex",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]

[tool.coverage.run]
source = ["src/pycomplex"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pycomplex]
# Maximum complexity thresholds
max-complexity = 10
max-cognitive = 7

# File patterns to exclude (default: empty)
exclude = [
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/__pycache__/*",
    "*.egg-info/*",
]

# File patterns to include (default: all .py files)
# If specified, only files matching these patterns will be analyzed
include = []

# Default paths to analyze when no paths are provided
# If not specified, current directory is used
paths = ["src/"]

[dependency-groups]
dev = [
    "mypy>=1.14.1",
    "pytest>=8.3.5",
    "pytest-cov>=5.0.0",
    "ruff>=0.12.0",
    "types-tabulate>=0.9.0.20241207",
    "pre-commit>=3.5.0",
]
